
/**
 * Utils class related to theme color changes.
 */
class ColorUtils {

	/**
	 * Converts color in hex format to RGBA format
	 * @param hex 
	 *		Color in hex format
	 * @param opacity
	 *		opacity value between 0 to 255
	 */
	static hexToRgbA(hex, opacity) {
		var c;
		if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){
			c= hex.substring(1).split('');
        	if(c.length== 3){
            	c= [c[0], c[0], c[1], c[1], c[2], c[2]];
        	}
        	c= '0x'+c.join('');
        	return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+','+opacity+')';
    	}
    	throw new Error('Bad Hex');
	}

	/**
	 * Converts color in hex format to decimal format
	 * @param hex 
	 *		Color in hex format
	 */
	static hexToDec(hex) {
    return hex.toLowerCase().split('').reduce( (result, ch) =>
        result * 16 + '0123456789abcdefgh'.indexOf(ch), 0);
  }

  	/**
	 * Converts color received in init props to js equivalent
	 * @param hex 
	 *		Color
	 */
	static convertThemeColor(color) {
		let output = null;
		if (color[0] === "#") {
			color = color.substring(color.length,1);
		}

		// ARGB CHECK
		if (color.length === 8) {
			//const opacity = this.hexToDec(color[0]+color[1]);
			const hex = "#"+color[2]+color[3]+color[4]+color[5]+color[6]+color[7] + color[0]+color[1];
			output = hex;
			//output = this.hexToRgbA(hex, opacity)
		} else {
			output = "#"+color;
		}
		return output;
	}

	/**
	 * Applies opacity to a color
	 * @param hex 
	 *		Color
	 * @param opacity
	 *		opacity value between 0 to 255
	 */
	static getColorWithOpacity(color, opacity) {
		if (opacity > 1) opacity = 1;
        if (opacity < 0) opacity = 0;
		
		let output = null;
		if (color[0] === "#") {
			color = color.substring(color.length,1);
		}

		// ARGB CHECK
		if (color.length === 8) {
			const hex = "#"+color[0]+color[1]+color[2]+color[3]+color[4]+color[5];//+ color[0]+color[1];
			//output = hex;
			output = this.hexToRgbA(hex, opacity)
		} else {
			output = this.hexToRgbA("#" + color, opacity);
		}
		return output;
	}
 }

 export default ColorUtils;