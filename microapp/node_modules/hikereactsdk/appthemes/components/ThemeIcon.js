import React from 'react';
import {TouchableOpacity, Image, BackHandler} from 'react-native'
import AppTheme from '../AppTheme'
import IconStyles from '../IconStyles'

/**
 * Theme icon component which accepts props
 * @property iconProfile
 * 		icon profile which will be applied at runtime
 * @property isSelected
 *		whether this icon is in selected state or not
 * @property color
 *		if icon profile is not defined then component uses this field to color the icon. Default is main color
 * @property source 
 * 		image source
 * @property style
 *		style is applied on image
 * @property onPress
 * 		callback when icon is pressed
 */
class ThemeIcon extends React.Component {

	constructor(props) {
		super(props);
	}

	/**
	 * Renders the icon based on props passed.
	 */
	render() {
		if (this.props.iconProfile) {
			var iconProfile = IconStyles.getStyles()[this.props.iconProfile];
			var pressedOpacity = iconProfile.pressedOpacity ? iconProfile.pressedOpacity : 1;
			var defaultColor = iconProfile.defaultColor;
			var tintColor = (this.props.isSelected) ? iconProfile.selectedColor : iconProfile.defaultColor;
		} else {
			var pressedOpacity = 1;
			var tintColor = (this.props.color) ? this.props.color : AppTheme.getColorPalette().mainColor;
		}


		if (this.props.iconProfile) {
			return (
				<TouchableOpacity
				onPress={() => { if (this.props.onPress) 
									this.props.onPress()}}
				style={this.props.style}
				activeOpacity={pressedOpacity}>
					<Image
						style={{tintColor: tintColor}}
          				source={this.props.source}/>
          		</TouchableOpacity>
          	);
		} else {
			return (
				<Image
					style={[{tintColor: tintColor}, this.props.style]}
          			source={this.props.source}/>
          	);
		}
	}
}

export default ThemeIcon;