import React from 'react';
import { StyleSheet, TouchableOpacity, View, Text, ActivityIndicator } from 'react-native'
import AppTheme from '../AppTheme'
import IconStyles from '../IconStyles'
import FontStyles from '../FontStyles'
import TextColorStateStyles from '../TextColorStateStyles';
import ButtonStyles from '../ButtonStyles';
import ColorUtils from '../ColorUtils';

class ThemeSolidButton extends React.Component {

	constructor(props) {
		super(props);
		this.renderInnerData = this.renderInnerData.bind(this);
	}

	renderInnerData(textTintColor, fontProfile) {
		if (this.props.loading) {
			return (
				<View style={styles.loading}>
					<ActivityIndicator animating={true} color="#fff"/>
				</View>
			);
		} else {
			return (
				<View style={styles.buttonContentContainer}>
					<Text {...this.props} style={[{color: textTintColor}, fontProfile]}>
						{this.props.title}
					</Text>
				</View>
			);
		}
	}
	
	render() {
		if (this.props.buttonProfile) {
			var buttonProfile = ButtonStyles.getStyles()[this.props.buttonProfile];
			var buttonPressedOpacity = buttonProfile.pressedOpacity ? buttonProfile.pressedOpacity : 1;
			var tintColor = (this.props.isSelected) ? buttonProfile.selectedColor : buttonProfile.defaultColor;
		} else {
			var buttonPressedOpacity = 1;
			var tintColor = (this.props.isSelected) ? this.props.selectedColor : this.props.color;
		}
		
		var fontProfile = FontStyles[this.props.fontProfile];

		if (this.props.textColorStateProfile) {
			var textColorStateProfile = TextColorStateStyles.getStyles()[this.props.textColorStateProfile];
			var textTintColor = textColorStateProfile.defaultColor;
			if (this.props.isSelected)
				textTintColor = textColorStateProfile.selectedColor;
			else if (this.props.isDisabled)
				textTintColor = textColorStateProfile.disabledColor;
		} else {
			var textTintColor = this.props.textColor ? this.props.textColor : AppTheme.getColorPalette().mainColor;
		}

		if (this.props.buttonProfile || this.props.onPress) {
		return (
			<TouchableOpacity
				onPress={() => {if (this.props.onPress && !this.props.loading)
									this.props.onPress();
								}
						}
				activeOpacity={buttonPressedOpacity}
				style={[styles.button, styles.recBtnStyle, {backgroundColor: tintColor, borderColor: 'transparent'}, this.props.style]}>
					{this.renderInnerData(textTintColor, fontProfile)}
          	</TouchableOpacity>
          	);
		} else {
			return (
				<View style={[styles.button, styles.recBtnStyle, {backgroundColor: tintColor, borderColor: 'transparent'}, this.props.style]}>
					{this.renderInnerData(textTintColor, fontProfile)}
          		</View>
          	);
		}
	}
}

const styles = StyleSheet.create({
  recBtnStyle: {
  	borderRadius: 100,
  	borderWidth: 1,
    height: 44,
    marginTop: 2,
    overflow: 'hidden',
    marginBottom:0,
  },
  buttonContentContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row'
  },
  button: {
    height: 44,
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 8,
    marginBottom: 10,
    alignSelf: 'stretch',
    justifyContent: 'center',
  },
  loading: {
	alignSelf: 'center'
  }
 });

export default ThemeSolidButton;