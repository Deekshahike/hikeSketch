import React from 'react';
import {TouchableOpacity, Text} from 'react-native'
import AppTheme from '../AppTheme'
import IconStyles from '../IconStyles'
import FontStyles from '../FontStyles'
import TextColorStateStyles from '../TextColorStateStyles';

/**
 * Theme text component which accepts props
 * @property textColorStateProfile
 * 		text color state profile which will be applied at runtime
 * @property isSelected
 *		whether this text is in selected state or not
 * @property isDisabled
 *		whether this text is in disabled state or not
 * @property color
 *		if text color state profile is not defined then component uses this field to color the icon. Default is main color
 * @property text 
 * 		text to show
 * @property style
 *		style is applied on image
 * @property onPress
 * 		callback when icon is pressed
 * @property fontProfile
 *		font profile which will define font size and family
 */
class ThemeText extends React.Component {

	constructor(props) {
		super(props);
	}

	/**
	 * Renders the text based on props passed.
	 */
	render() {
		if (this.props.textColorStateProfile) {
			var textColorStateProfile = TextColorStateStyles.getStyles()[this.props.textColorStateProfile];
			var pressedOpacity = textColorStateProfile.pressedOpacity ? textColorStateProfile.pressedOpacity : 1;
			var tintColor = textColorStateProfile.defaultColor;
			if (this.props.isSelected)
				tintColor = textColorStateProfile.selectedColor;
			else if (this.props.isDisabled)
				tintColor = textColorStateProfile.disabledColor;
		} else {
			var pressedOpacity = 1;
			var tintColor = (this.props.color) ? this.props.color : AppTheme.getColorPalette().mainColor;
		}
		
		var fontProfile = FontStyles[this.props.fontProfile];
		
		if (this.props.textColorStateProfile) {
			return (
				<TouchableOpacity
				onPress={() => {if (this.props.onPress) 
									this.props.onPress();
							}
						}
				activeOpacity={pressedOpacity}>
					<Text {...this.props} style={[this.props.style, {color: tintColor}, fontProfile]}>
						{this.props.text}
					</Text>
          		</TouchableOpacity>
          	);
		} else {
			return (
				<Text {...this.props} style={[this.props.style, {color: tintColor}, fontProfile]}>
					{this.props.text}
				</Text>
			);
		}
	}
}

export default ThemeText;