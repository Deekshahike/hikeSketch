import NativeToJsThemeDataConvertor from './NativeToJsThemeDataConvertor'
import FontStyles from './FontStyles'
import theme from 'react-native-theme';
import IconStyles from './IconStyles';
import TextColorStateStyles from './TextColorStateStyles';
import ButtonStyles from './ButtonStyles';
import {Platform, StatusBar} from 'react-native';
import ColorUtils from './ColorUtils';

let colorPalette;
let isNightTheme;
let isZenTheme;
let gradientColorsArray;
let patternAppFillOpacity;
let patternAppFillColor;
let patternName;

/**
 * Class which converts the the app theme data received in init props into react JS equivalent
 * This class is responsible for initializing the color profiles, icon profiles, font profiles , button profiles and text color state profiles
 */
class AppTheme {

	/**
	 * This method accepts the theme data from init props and converts theme into js equivalent. Also initializes different app theme profiles.
	 */
	static initThemeData(themeData) {

		isNightTheme = Platform.OS === 'ios' ? themeData.themeId === '999999' : themeData.themeId === 'moonlightThemeId';
		isZenTheme = Platform.OS === 'ios' ? themeData.themeId === '999998' : themeData.themeId === 'whiteThemeId';
		colorPalette = NativeToJsThemeDataConvertor.getColorPalette(themeData.colorProps);
		
		const gradientColors = themeData.gradientColors.split(',');
		
		gradientColorsArray = [];
		if (gradientColors[0]) {
			gradientColorsArray[0] = ColorUtils.convertThemeColor(gradientColors[0]);
		}
		if (gradientColors[1]) {
			gradientColorsArray[1] = ColorUtils.convertThemeColor(gradientColors[1]);	
		}
		if (gradientColors[2]) {
			gradientColorsArray[2] = ColorUtils.convertThemeColor(gradientColors[2]);	
		}

		if (gradientColorsArray.length === 1) {
			gradientColorsArray[1] = gradientColorsArray[0];
		}
		
		patternAppFillOpacity = parseFloat(themeData.patternAppFillOpacity);
        patternAppFillColor = ColorUtils.convertThemeColor(themeData.patternAppFillColor);
        patternName = themeData.pattern;

		theme.add(FontStyles);
		IconStyles.initStyles();
		TextColorStateStyles.initStyles();
		ButtonStyles.initStyles();
	}

	/**
	 * Returns the color palatte which contains all the colors used in the app.
	 */
	static getColorPalette() {
		return colorPalette;
	}

	/**
	 * Returns true if current theme is night theme else false
	 */
	static isNightTheme() {
		return isNightTheme;
	}

	/**
	 * Returns true if current theme is zen theme else false.
	 */
	static isZenTheme() {
		return isZenTheme;
	}

	/**
	 * Returns gradient colors array used for app theme background.
	 */
	static getGradientColorsArray() {
		return gradientColorsArray;
	}

	/**
	 * Returns opacity used for app theme pattern.
	 */
	static getPatternAppFillOpacity() {
		return patternAppFillOpacity;
	}

	/**
	 * Returns color used for app theme pattern.
	 */
	static getPatternAppFillColor() {
		return patternAppFillColor;
	}

	/**
	 * Returns the pattern resource name.
	 */
	static getPatternName() {
		var nameArray = [patternName];
    	delete nameArray.includes;
    	delete nameArray.repeat;
    	nameArray['length'] = Object.keys(nameArray).length;
    	return output = Array.prototype.slice.call(nameArray).join("");
  	}
}

export default AppTheme;