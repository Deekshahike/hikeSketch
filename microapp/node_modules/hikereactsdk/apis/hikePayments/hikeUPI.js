/**
 * Created by anurag on 21/12/16.
 */

import {NativeModules} from 'react-native';
const HikeUPIModule = NativeModules.HikeUPIModule;

const banks = [
  {
    ifsc: 'IFSC1',
    name: 'Axis',
  }, {
    ifsc: 'IFSC2',
    name: 'PNB'
  }
];

const DEVICE = false;

class HikeUPI {
  /**
   * Get information on device sims.
   * @returns {Promise}
   */
  static getSimsInfo() {
    if (DEVICE) {
      return HikeUPIModule.getSimsInfo();
    }

    return new Promise((resolve) => {
      setTimeout(resolve, 500, [{
        operator: 'Airtel',
        slot_index: 0,
      }, {
        operator: 'JIO',
        slot_index: 1,
      }]);
    });

  }


  static registerDeviceAndSim(slotIndex) {
    if (DEVICE) {
      return HikeUPIModule.registerDeviceAndSim(slotIndex);
    }

    return new Promise((resolve) => {
      setTimeout(resolve, 500, 'registered sim');
    });
  }

  static getAvailableBanks() {
    if (DEVICE) {
      return HikeUPIModule.getAvailableBanks();
    }

    return new Promise((resolve) => {
      setTimeout(resolve, 500, banks);
    });
  }

  static getAccountsForBank(bank) {
    if (DEVICE) {
      return HikeUPIModule.getAccountsForBank(bank);
    }

    return new Promise((resolve) => {
      setTimeout(resolve, 500, [
        {
          name: 'Rashmi',
          account_number: 12345,
          address_1: 'Delhi',
          address_2: 'South West',
          is_mpin_set: false,
        }, {
          name: 'Anurag',
          account_number: 54321,
          address_1: 'Gurgaon',
          address_2: 'Sector 14',
          is_mpin_set: true,
        }
      ]);
    });
  }

  static createVPA(vpa) {
    if (DEVICE) {
      return HikeUPIModule.createVPA(vpa);
    }

    return new Promise((resolve) => {
      resolve('some vpa');
    });
  }

  static isVPAValid(vpa) {
    if (DEVICE) {
      return HikeUPIModule.isVPAValid(vpa);
    }

    return new Promise((resolve) => {
      resolve(true);
    });
  }

  static isVPAAvailable(vpa) {
    if (DEVICE) {
      return HikeUPIModule.isVPAAvailable(vpa);
    }

    return new Promise((resolve) => {
      resolve(true);
    });
  }

  static setMPIN(debitCard, month, year, account) {
    if (DEVICE) {
      return HikeUPIModule.setMPIN(debitCard, month, year, account);
    }

    return new Promise((resolve, reject) => {
      setTimeout(resolve, 500);
    });
  }

  static mapToAccount(account) {
    if (DEVICE) {
      return HikeUPIModule.mapToAccount(account);
    }

    return new Promise((resolve, reject) => {
      setTimeout(resolve, 500);
    });
  }


  static getHandlersForUPIAccount() {

  }

  static isUPIHandlerValid() {

  }

  static isUPIHandlerAvailable() {

  }

  static getSuggestedUPIHandlers() {

  }

  static createNewUPIHandler() {

  }

  static payUsingVpa() {

  }
}

export default HikeUPI;
