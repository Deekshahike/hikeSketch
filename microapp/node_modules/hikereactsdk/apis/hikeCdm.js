import {NativeModules} from 'react-native';
import keyMirror from 'keymirror';

const HikeCdmModule = NativeModules.HikeCDMModule || keyMirror({
  SUCCESS: null,
  FAILURE: null,
  DOWNLOADING: null,
});

/**
 * Hike Content Download Manager Module
 */
class HikeCdm {
  /**
   * CDM API to Download assets from Asset Management system for a Molecule.
   * Refer https://hikeapp.atlassian.net/wiki/display/EN/Scoopwhoop+Tech+Doc for terminology.
   * Fires a moleculeDownloaded on NativeEventEmitter with moleculeId as a parameter.
   * @param {string} moleculeId Molecule Id is important since when native emits a
   * "moleculeDownloaded" event, moleculeId would be its first parameter to identify which download
   * call has been resolved.
   * @param {Array.string} atomIds Array of atom id strings where atoms constitute a molecule. For ex: two images present in a story qualify as atoms.
   */
  static downloadAssetsForMolecule(moleculeId, atomIds) { return HikeCdmModule.downloadAssetsForMolecule(moleculeId, atomIds); }

  /**
   * CDM API used by a Microapp on open to get a list of downloaded stories
   *
   * @returns {Promise.Array} Promise is resolved with array of stories completely downloaded.
   */
  static getDownloadedMolecules() { return HikeCdmModule.getDownloadedMolecules(); }

  /**
   * CDM API used by a microapp to get directory path for the assets that are downloaded via CDM.
   * Required to refer to the image/video asset by absolute path for displaying/playing purpose.
   *
   * @returns {Promise.String} Promise is resolved with string path to the downloaded assets directory.
   */
  static getDownloadAssetsDirectory() { return HikeCdmModule.getDownloadAssetsDirectory(); }

  /**
   * Process content tasks
   *
   */
  static updateContentJson() { return HikeCdmModule.updateContentJson(); }


  /**
   * Call this function to trigger a CDM call to get latest data
   */
  static setEditionAsRead(editionId) {
    return HikeCdmModule.setEditionAsRead(editionId);
  }

  /**
   * Call this method to get extension of list of assets
   *
   * @param assetArray not null
   */
  static getAssetFileExtension(assetArray) {
    return HikeCdmModule.getAssetFileExtension(assetArray);
  }
}

/**
 * CDM request status enum for request status events.
 * @static
 * @type {object}
 * @property {string} SUCCESS - Success event for request
 * @property {string} FAILURE - Failure event for request
 * @property {string} DOWNLOADING - Successful download start event for request
 */
HikeCdm.REQUEST_STATUS = {
  SUCCESS: HikeCdmModule.SUCCESS,
  FAILURE: HikeCdmModule.FAILURE,
  DOWNLOADING: HikeCdmModule.DOWNLOADING,
};

export default HikeCdm;
