/**
 * Created by anurag on 21/11/16.
 */

import {NativeModules} from 'react-native';
const HikeStorageModule = NativeModules.HikeStorageModule;

/**
 * Hike Storage module
 */
class HikeStorage {
  /**
   * Get value from cache.
   * @param {string} key Key against which value is to be looked up
   *
   * @returns {Promise.String} Promise is resolved with corresponding value in cache.
   */
   static getFromCache(key) { return HikeStorageModule.getFromCache(key); }

  /**
	 * Get from cache.
	 *
	 * @param key : the key
	 * @param msgHash : messageHash of the card
   *
	 */
  static getFromCacheForCard(key, msgHash) { return HikeStorageModule.getFromCacheForCard(key, msgHash); }

  /**
   * Put Value in Cache. This cache is not preserved in backup.
   * @param {string} key Key against which value would be stored.
   * @param {string} value Value which needs to be stored.
   */
  static putInCache(key, value) { HikeStorageModule.putInCache(key, value); }

  /**
	 * Put in cache.
	 *
	 * @param key: the key
	 * @param msgHash: messageHash of the card
	 * @param value: the value
   *
	 */
	 static putInCacheForCard(msgHash, key, value) { return HikeStorageModule.putInCacheForCard(msgHash, key, value); }

  /**
   * Remove value from cache.
   * @param {string} key Key against which {key, value} entry needs to be removed.
   */
  static removeFromCache(key) { HikeStorageModule.removeFromCache(key); }

  /**
   * Clear entire microapp cache.
   */
  static clearCache() { HikeStorageModule.clearCache(); }

  /**
   * Update Helper Data object
   * @param {object} partialObj JSON object that needs to be updated in helper data. It would be set if all keys are new, otherwise data would be overwritten for existing keys.
   */
  static updateHelperData(partialObj) {
    if (!partialObj || Array.isArray(partialObj) || typeof partialObj !== 'object' || Object.keys(partialObj).length === 0) {
      return; // Is an empty object
    }

    HikeStorageModule.updateHelperData(partialObj);
  }
}

export default HikeStorage;
