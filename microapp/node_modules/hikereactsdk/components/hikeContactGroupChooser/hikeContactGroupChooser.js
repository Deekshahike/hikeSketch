import React, { Component } from 'react';
import {
	View,
	Text,
	ListView,
	ActivityIndicator,
	StyleSheet,
	Image,
	TouchableNativeFeedback,
	ToastAndroid,
	Alert
} from 'react-native';
import { HikeSharing } from '../../apis';
import MultipleChoice from './multiselect'

const PropTypes = React.PropTypes;

const categoryNameMap = {
  friends: 'Friends',
  onHike: 'On Hike',
  notOnHike: 'Not On Hike',
};

const placeholderIcon = require('./images/contact.png');

const noop = () => {};

export default class HikeContactGroupChooser extends Component {
  static propTypes = {
		onSelectContact: PropTypes.func,
    showsVerticalScrollIndicator: PropTypes.bool,
    selectedGroups: PropTypes.array,
	};

  static defaultProps = {
    onSelectContact: noop,
    showsVerticalScrollIndicator: false,
	};

  constructor(props) {
    super(props);

    this.ds = new ListView.DataSource({
      rowHasChanged: (r1, r2) => r1 !== r2,
      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,
    });

    this.selectedGroups = this.props.selectedGroups ? JSON.parse(JSON.stringify(this.props.selectedGroups)) : [];

    this.state = {
			selectedContacts: this.props.selectedGroups ? JSON.parse(JSON.stringify(this.props.selectedGroups)) : [],
			groupsList : this.props.groupsList,
    };

    this._renderSectionHeader = this._renderSectionHeader.bind(this);
    this._onSelectContact = this._onSelectContact.bind(this);
		this._updateSelectedOptions = this._updateSelectedOptions.bind(this);
		this.getSelectedGroups = this.getSelectedGroups.bind(this);
		this._createNewGroup = this._createNewGroup.bind(this);
  }

	_onSelectContact(contact) {
    this.props.onSelectContact(contact);
		contact.isSelected = !contact.isSelected;
		this.setState({ selectedContacts: this.state.selectedContacts.concat([contact]) });
	}

	_resetContacts() {
		this.setState({ selectedContacts: [] });
		this.selectedGroups = [];
	}

	_updateSelectedOptions() {
 		this.selectedGroups = this.refs.mg.state.selectedOptions;
		console.log(this.refs.mg.state.selectedOptions);
		this.props.onSelectContact();
	}

	getSelectedGroups() {
		return this.selectedGroups;
	}

	_createNewGroup() {
		HikeSharing.openGroupCreator().then((response) => {
			let list = this.state.groupsList;
			response.isNew = true;
			let newObj = Object.assign({},  {name:response.name  ,isNew:true, group_id:response.groupId , "members_count":response.members.length + ' people' })
			console.log("response",JSON.stringify(newObj));
			list.unshift(newObj);

			this.setState({
				groupsList: list
			})
		}).catch(e => {
			console.log('error',e);
		})
	}

  _renderSectionHeader(sectionData, category) {
    if (sectionData.length > 0)
      return (
        <View>
          <View style={styles.listSeparator}>
            <View style={styles.emptyLeftSection}></View>
            <View style={styles.borderRow}></View>
          </View>
          <View style={styles.sectionHeader}>
            <Text style={styles.contactCategory}>{categoryNameMap[category].toUpperCase()}</Text>
          </View>
       </View>
      );
    return null;
  }

  render() {
    return (
        <View style={[styles.ctr, this.props.style]}>
          <MultipleChoice ref="mg" options={this.props.groupsList} selectedOptions={this.selectedGroups} maxSelectedOptions={1}
            onSelection={option => {this._updateSelectedOptions()}} createGroup = {this.props.createGroup} getGeneralIcon = {(contact) => this.props.getGeneralIcon(contact)}
          />
        </View>
    );

  }
}

const iconSize = 48;

const styles = StyleSheet.create({
  loader: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  ctr: {
    flex: 1,
    justifyContent: 'flex-start',
  },
  sectionHeader:{
      justifyContent:'center',
      backgroundColor:'#ffffff'
  },
  listSeparator: {
    flex: 1,
    flexDirection: 'row',
    flexWrap: 'wrap',
  },

  emptyLeftSection: {
    width: 82,
    borderBottomWidth: 1,
    borderBottomColor: '#ffffff',
  },

  borderRow: {
    flex: 1,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.06)',
  },

  contactCategory: {
    alignSelf:'center',
    marginVertical: 18,
    fontSize:12,
    color:'rgba(0,0,0,0.3)'
  },
  contactItem: {
    flex:1,
    flexDirection: 'row',
    alignItems: 'flex-start',
    paddingLeft:20,
    paddingTop:12,
    paddingBottom:12,
    backgroundColor:'#ffffff',
    alignItems: 'center',
  },
  contactIcon: {
    width: 48,
    height: 48,
    borderRadius: 48,
  },
  contactDesc:{
    flex:1,
    flexDirection:'column',
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 16
  },
  contactName: {
    flex:1,
    flexDirection:'row',
    alignSelf:'flex-start',
    fontSize: 16,
    color:'#3D475B',
		fontFamily:"FaktSoftProMedium",
    marginBottom:6
  },
  contactNumber:{
    flex:1,
    flexDirection:'row',
    alignSelf:'flex-start',
		fontFamily:"FaktSoftProNormal",
    fontSize: 14,
		color:'rgba(61,71,91,0.5)'
	}
});
