import React, { Component } from 'react'
import { View, StyleSheet, Modal, Text, Image, ActivityIndicator, FlatList } from 'react-native'
import ThemeText from '../../appthemes/components/ThemeText';
import Spinner from 'react-native-loading-spinner-overlay';
import AppTheme from '../../appthemes/AppTheme';
import  Radio  from './Radio'
import CustomTouch from '../CustomTouch';
/**
* Dialog Box accepts one of the three props (renderWithPng, renderWithList, renderWithLoader) true at a time.
* renderWithPng recieves  {visible, heading, subheading, buttontext, onPress } as props,
* renderWithLoader recieves {visible, subheading} as props and
* renderWithList recieves {visible, heading, subheading, text, negbtntext, posbtntext, onNegativePress, onPositivePress, multiSelect, _data } as props.
* @property renderWithPng
* 		boolean for showing the nointernet dialogBox with nointernet image
* @property renderWithList
*		boolean for showing dialogbox consisting header,text,subtext, list with radio button and two buttons
* @property renderWithLoader
*		booleand for showing dialogbox consisting loader and simpleText
* @property  visible
*		boolean for showing dialog
* @property heading
* 		string to show heading on the Dialog
* @property subheading
*		string to show text with fontSize 16
* @property buttontext
* 		string to show text button with accent color
* @property onPress
*		callback on press of text button
* @property text
* 		string to show some additional text with fontSize 14
* @property negbtntext
*		string to show text button with secondary color
* @property posbtntext
*		string to show text button with accent color
* @property onNegativePress
* 		callback on press of text button with secondary color
* @property onPositivePress
* 		callback on press of text button with accent color
* @property _data
* 		array of variables used to show list with radio button
* @property multiSelect
* 		boolean for selecting multiple items from list, if not initialized or false then we can select one item at a time only
*/

class DialogBox extends Component {
	constructor(props) {
		super(props);
		this.state = {
			dataSource: [],
			selectedRow: -1,
		};
	}
	componentWillReceiveProps(nextProp) {
		if (nextProp.rowData) {
			this.setState({
				selectedRow: nextProp.rowData.id
			});
		}
	}
	componentWillMount() {
		const { _data } = this.props;
		if (_data) {
			this.data = [];
			for (var i = 0; i < _data.length; i++) {
				this.data.push({ id: i, value: _data[i], isSelected: false })

			}
			this.setState({
				dataSource: this.data
			});
		}
	}
	renderWithPng() {
		return (
			<Modal style={styles.modal}
				animationType={"fade"}
				transparent={true}
				visible={this.props.visible}
				onRequestClose={() => { }}>
				<View style={styles.noInternetContainer}>
					<View style={styles.noInternet}>
						<Image source={require('../../images/img_def_empty_nointernet.png')} resizeMode={'cover'} style={{ width: 168, height: 128 }}></Image>
						<View style={styles.noInternetText}>
							{this.props.heading &&
								<ThemeText
									style={{ textAlign: 'center' }}
									fontProfile='FontProfile02'
									text={this.props.heading}
									textColorStateProfile='ColorStateProfile03'
									/>
							}
							{this.props.subheading && <ThemeText
								style={{ textAlign: 'center', marginTop: 4, marginBottom: 16, }}
								fontProfile='FontProfile19'
								text={this.props.subheading}
								textColorStateProfile='ColorStateProfile06' />
						}
					</View>

					<ThemeText
						style={[styles.noInternetButton, { padding: 8 }]}
						text={this.props.buttontext}
						fontProfile='FontProfile07'
						textColorStateProfile='ColorStateProfile02'
						onPress={() => {
							this.props.onPress()
						}} />
					</View>
				</View>
			</Modal>

		);


	}
	renderWithLoader() {
		var tintColor = AppTheme.getColorPalette().accentColor;
		return (
			<Modal style={styles.modal}
				animationType={"fade"}
				transparent={true}
				visible={this.props.visible}
				onRequestClose={() => { }}>
				<View style={styles.noInternetContainer}>
					<View style={[styles.noInternetwithloader]}>
						<View style={{ flexDirection: 'row', paddingHorizontal: 18 }}>
							<View style={{ alignSelf: 'center' }}><ActivityIndicator size="large" color={tintColor} /></View>
							{this.props.subheading && <ThemeText
								style={{ justifyContent: 'flex-end', marginLeft: 16 }}
								fontProfile='FontProfile19'
								text={this.props.subheading}
								textColorStateProfile='ColorStateProfile06'
								/>
						}
					</View>
				</View>
			</View>
		</Modal>
	);
}
renderWithList() {
	return (
		<Modal style={styles.modal}
			animationType={"fade"}
			transparent={true}
			visible={this.props.visible}
			onRequestClose={() => { }}>
			<View style={styles.noInternetContainer}>
				<View style={[styles.noInternetwithlist]}>
					<View>
						{(this.props.heading) &&
							<ThemeText
								style={{ textAlign: 'left' }}
								fontProfile='FontProfile02'
								text={this.props.heading}
								textColorStateProfile='ColorStateProfile03'
								/>
						}
						{(this.props.subheading) &&
							<ThemeText
								style={{ textAlign: 'left', marginTop: 16 }}
								fontProfile='FontProfile05'
								text={this.props.subheading}
								textColorStateProfile='ColorStateProfile06' />
						}
						{(this.props.text) &&
							<ThemeText
								style={{ textAlign: 'left', marginTop: 16, }}
								fontProfile='FontProfile19'
								text={this.props.text}
								textColorStateProfile='ColorStateProfile06' />
						}
						{(this.props._data) &&
							<FlatList
								style={{ paddingTop: 16 }}
								data={this.state.dataSource}
								renderItem={this._renderRow.bind(this)}
								keyExtractor={(item, index) => index}
								/>
						}
						{(this.props.negbtntext || this.props.posbtntext) &&
							<View style={{ flexDirection: 'row', justifyContent: 'flex-end', paddingTop: 28 }}>
								<ThemeText
									style={[styles.noInternetButton, { padding: 8 }]}
									text={this.props.negbtntext}
									fontProfile='FontProfile07'
									textColorStateProfile='ColorStateProfile06'
									onPress={() => {
										this.props.onNegativePress()
									}} />
									<ThemeText
										style={[styles.noInternetButton, { padding: 8, marginLeft: 20 }]}
										text={this.props.posbtntext}
										fontProfile='FontProfile07'
										textColorStateProfile='ColorStateProfile02'
										onPress={() => {
											this.props.onPositivePress()
										}} />
									</View>
								}
							</View>
						</View>
					</View>
				</Modal>
			);
		}


		callstate(rowID) {
			var newArray = Array.from(this.state.dataSource);
			//BridgeUtils.logMessage('  newArrya '  + JSON.stringify(newArray));
			if (this.props.multiSelect) {
				newArray[rowID].isSelected = !newArray[rowID].isSelected;

			} else {
				for (var i = 0; i < newArray.length; i++) {
					if (i == rowID) {
						newArray[rowID].isSelected = !newArray[rowID].isSelected;
					} else {
						newArray[i].isSelected = false;
					}
				}

			}

			this.setState({
				dataSource: newArray
			});

		}

		_renderRow(rowData) {
			return (
				<CustomTouch onPress={() => { this.callstate.bind(this)(rowData.item.id) }} key={rowData.item.id}>
					<View style={{ flexDirection: 'row', paddingVertical: 8 }} >
						<Radio
							style={{ justifyContent: 'center', alignItems: 'center' }}
							selectionColor={{ backgroundColor: AppTheme.getColorPalette().accentColor }}
							selected={rowData.item.isSelected}
							onPress={() => {
								this.callstate.bind(this)(rowData.item.id);
							}}
							/>
						<ThemeText
							style={{ textAlign: 'left', alignSelf: 'center' }}
							fontProfile='FontProfile05'
							text={rowData.item.value}
							textColorStateProfile='ColorStateProfile03'
							/>

					</View>
				</CustomTouch>
			);

		}


		render() {

			return (
				<View>
					{this.props.renderWithList && this.renderWithList()}
					{this.props.renderWithPng && this.renderWithPng()}
					{this.props.renderWithLoader && this.renderWithLoader()}
				</View>

			);

		}
	}

	const styles = StyleSheet.create({
		noInternetContainer: {
			flex: 1,
			justifyContent: 'center',
			alignItems: 'center',
			backgroundColor: 'rgba(0,0,0,0.50)',
		},
		modal: {
			zIndex: 9999,
		},
		noInternet: {
			width: 320,
			backgroundColor: '#FFF',
			borderRadius: 6,
			paddingVertical: 20,
			paddingHorizontal: 36,
			justifyContent: 'center',
			alignItems: 'center'
		},
		noInternetText: {
			marginTop: 25,
		},

		noInternetButton: {

			justifyContent: 'center',
			alignItems: 'center'
		},
		noInternetwithloader: {
			width: 280,
			backgroundColor: '#FFF',
			borderRadius: 6,
			paddingVertical: 20,
			paddingHorizontal: 18,
			justifyContent: 'center',
			alignItems: 'center'

		},
		noInternetwithlist: {
			width: 280,
			backgroundColor: '#FFF',
			borderRadius: 6,
			paddingVertical: 20,
			paddingLeft: 24,
			paddingRight: 16

		}


	})

	export default DialogBox;
