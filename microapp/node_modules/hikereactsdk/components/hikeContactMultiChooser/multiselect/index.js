'use strict';

import React, { PropTypes } from 'react'
import {
	Text,
	TouchableOpacity,
	TouchableWithoutFeedback,
	TouchableNativeFeedback,
	View,
	Image,
	ListView
} from 'react-native';

import BaseComponent from './BaseComponent'
import Styles from './styles'
const placeholderIcon = require('../images/contact.png');

const categoryNameMap = {
	friends: 'Friends',
	onHike: 'On Hike',
	notOnHike: 'Not On Hike',
};

const propTypes = {
	options: React.PropTypes.array.isRequired,
	selectedOptions: React.PropTypes.array,
	maxSelectedOptions: React.PropTypes.number,
	onSelection: React.PropTypes.func,
	renderIndicator: React.PropTypes.func,
	renderSeparator: React.PropTypes.func,
	renderRow: React.PropTypes.func,
	renderText: React.PropTypes.func,
	style: View.propTypes.style,
	optionStyle: View.propTypes.style,
	disabled: PropTypes.bool
};
const defaultProps = {
	options: [],
	selectedOptions: [],
	onSelection(option){},
	style:{},
	optionStyle:{},
	disabled: false
};

class MultipleChoice extends BaseComponent {

	constructor(props) {
		super(props);

		const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => true});
		this.ds = ds;

		this.state = {
			dataSource: ds.cloneWithRows(this.props.options),
			selectedOptions: this.props.selectedOptions || [],
			disabled: this.props.disabled
		};

		this._bind(
			'_renderRow',
			'_selectOption',
			'_isSelected',
			'_updateSelectedOptions'
		);
	}

	componentWillReceiveProps(nextProps) {
		this._updateSelectedOptions(nextProps.selectedOptions);
		this.setState({
			disabled: nextProps.disabled
		});
	}
	_updateSelectedOptions(selectedOptions) {
		this.setState({
			selectedOptions,
			dataSource: this.ds.cloneWithRows(this.props.options)
		});
	}

	_validateMaxSelectedOptions() {
		const maxSelectedOptions = this.props.maxSelectedOptions;
		const selectedOptions = this.state.selectedOptions;

		if (maxSelectedOptions && selectedOptions.length > 0 && selectedOptions.length >= maxSelectedOptions) {
			selectedOptions.splice(0, 1);
		}

		this._updateSelectedOptions(selectedOptions);
	}

	_selectOption(selectedOption) {

		let selectedOptions = this.state.selectedOptions;
		const index = selectedOptions.indexOf(selectedOption);
		//const index = selectedOptions.find(contact => contact.phoneNumber === selectedOption.phoneNumber)

		if (index === -1) {
			this._validateMaxSelectedOptions();
			selectedOptions.push(selectedOption);
		} else {
			selectedOptions.splice(index, 1);
		}

		this._updateSelectedOptions(selectedOptions);

		//run callback
		this.props.onSelection(selectedOption);
	}

	_isSelected(option) {
		return this.state.selectedOptions.find(selectedOption => selectedOption.phoneNumber === option.phoneNumber);
		//return this.state.selectedOptions.indexOf(option) !== -1;
	}

	_renderIndicator(option) {
		if (this._isSelected(option)) {
			if (typeof this.props.renderIndicator === 'function') {
				return this.props.renderIndicator(option);
			}

			return (
				<Image
					style={Styles.optionIndicatorIcon}
					tintColor='#1da8e8'
					source={require('../images/selected-tick.png')}
				/>
			);
		}
	}

	_renderSeparator(option) {

		if(typeof this.props.renderSeparator === 'function') {
			return this.props.renderSeparator(option);
		}

		return (<View style={Styles.separator}></View>);
	}

	_renderSectionHeader(sectionData, category) {
		if(sectionData.length>0)
			return (
				<View>
					<View style={Styles.listSeparator}>
						<View style={Styles.emptyLeftSection}></View>
						<View style={Styles.borderRow}></View>
					</View>
					<View style={Styles.sectionHeader}>
						<Text style={Styles.contactCategory}>{categoryNameMap[category].toUpperCase()}</Text>
					</View>
				</View>
			);
		return null;
	}

	_renderRow(contact) {
    const profilePicture = contact.thumbnail ?
      {uri: `data:image/png;base64, ${decodeURIComponent(contact.thumbnail)}`} :
      null;

    if (typeof this.props.renderRow === 'function') {
      return this.props.renderRow(contact);
    }

    const disabled = this.state.disabled;

    return (
      <TouchableNativeFeedback activeOpacity={disabled ? 1 : 0.7} onPress={!disabled ? ()=>{this._selectOption(contact)} : null}>
        <View style={Styles.contactItem}>
          <View style={Styles.thumbnailContainer}>{contact.thumbnail ? <Image source={profilePicture} style={Styles.contactIcon}/> : this.props.getGeneralIcon(contact) }</View>
          <View style={Styles.contactRightPane}>
            <View style={Styles.contactDesc}>
              <Text style={Styles.contactName}>{contact.name}</Text>
              <Text style={Styles.contactNumber}>{contact.phoneNumber}</Text>
            </View>

            <View style={Styles.optionIndicator}>{this._renderIndicator(contact)}</View>
          </View>
        </View>
      </TouchableNativeFeedback>
    );
	}

	render() {
		return (
			<ListView
				style={[Styles.list, this.props.style]}
				dataSource={this.state.dataSource}
				renderRow={this._renderRow}
			/>
		);
	}
};

MultipleChoice.propTypes = propTypes;
MultipleChoice.defaultProps = defaultProps;

module.exports = MultipleChoice;
