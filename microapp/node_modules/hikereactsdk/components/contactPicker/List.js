import React from 'react';
import { StyleSheet, Text, View, ToastAndroid, FlatList, Image, Platform, TouchableOpacity } from 'react-native';
import AppTheme from '../../appthemes/AppTheme';
import ThemeText from '../../appthemes/components/ThemeText';
import CustomTouch from '../CustomTouch';
import { Avatar } from '../Avatar';;
import ListRow from './ListRow';
import ListHeader from './ListHeader';
import { Logger } from '../../index';


/**
 * list accepts following props
 * @property showHeader
 *    boolean to show header on the top of list like to show 'Post to timeline'  or 'Create group'
 * @property headerSelected
 *    boolean to show tick if header row is selected
 * @property text
 *    string for showing header text like 'Post to timeline'  or 'Create group'
 * @property imag
 *    image path with require like require('img.png') to show image on listheader inplace of thumbnail
 * @property onPressHeader
 *    callback on press of header row
 * @property data
 *    array of data which u wanna show in list either as groups or Friends
 * @property onPressRow
 *    callback on press of row other than header
 * @property extraData
 *    boolean in form of state variable to rerender flatlist for some specific condition other than change in data
 */


 class List extends React.Component {

  constructor(props) {
    super(props);
    Logger.debug(props);
    this._renderHeader = this._renderHeader.bind(this);
    this._renderRow = this._renderRow.bind(this);
  }

  _renderHeader() {
    Logger.debug("render header");
    if (!this.props.showHeader) {
      return (<View />);
    } else {
      return (
        <ListHeader
          text={this.props.text}
          imag={this.props.imag}
          onPress={this.props.onPressHeader}
          selected={this.props.headerSelected} />
      );
    }
  }

  _renderRow(row) {
    Logger.debug(" i m in render row");
    return (
      <ListRow
        row={row.item}
        onSelect={() => this.props.onPressRow(row.item)}
        selected={row.item.selected} />
    );
  }

  render() {
    Logger.debug("list is called");
    return (
      <FlatList
        ListHeaderComponent={this._renderHeader}
        data={this.props.data}
        renderItem={this._renderRow}
        keyExtractor={(item, index) => index}
        extraData={this.props.extraData}
        showsVerticalScrollIndicator={false}
        ItemSeparatorComponent={({highlighted}) => (
          <View style={styles.listSeparator}>
            <View style={[styles.emptyLeftSection, {borderBottomColor: AppTheme.getColorPalette().backgroundColor}]}></View>
            <View style={[styles.borderRow, {borderBottomColor: AppTheme.getColorPalette().separatorColor}]}></View>
            <View style={[styles.emptyRightSection, {borderBottomColor: AppTheme.getColorPalette().backgroundColor}]}></View>
          </View>
        )}
        />
    )
  }
}
const styles = StyleSheet.create({
  listSeparator: {
    flex: 1,
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  emptyLeftSection: {
    width: 76,
    borderBottomWidth: 0.5,
  },
  emptyRightSection: {
    width: 16,
    borderBottomWidth: 0.5,
  },
  borderRow: {
    flex: 1,
    borderBottomWidth: 0.5
  },


});
export default List;
