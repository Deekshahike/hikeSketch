import AppTheme from '../../appthemes/AppTheme';
import { HikeContactGroupChooser, HikeContactMultiChooser, HikePay, HikeSharing, HikeStorage, HikeUtils } from '../../index';
import { AppThemeWrapper } from '../AppThemeWrapper';
import DialogBox from '../Dialog/DialogBox';
import ContactHeader from './ContactHeader';
import List from './List';
import NoSearchResult from './NoSearchResult'
import SendButton from './SendButton';
import React from 'react';
import { FlatList, Image, Platform, StyleSheet, Text, ToastAndroid, TouchableOpacity, View } from 'react-native';
import ScrollableTabView, { DefaultTabBar, ScrollableTabBar } from 'react-native-scrollable-tab-view';

/**
* Contact Container which accepts props
* @property onSendClick
* 		callback when send button is pressed. It will return list of chosen contacts and groups alongwith two booleans timeline and publicPost.
* @property onBack
* 		callback when icon is pressed present in the header
* @property onSelectGroupRow
*			callback when a Group is selected
* @property onSelectUserRow
* 		callback when a User is selected
* @property sendButtonEnableEligibility
*    callback to enable send button and it will return three thing, selected user count, selected group count and timeline selected
* @property data
*		data is object which contains all the property below this
* @property data.showFriends
* 		boolean for showing list of friends
* @property data.showGroups
* 		boolean for showing list of groups, if both showFriends and showGroups are true then it will show lists in TabView with tabLabel else it will show a simple list
* @property data.selection
*       string of constant value, "MULTI_SELECT", "NO_SELECT", "SELECT_ONE_FROM_EACH" and by default "SINGLE_SELECT" 
* @property data.showTimeline
* 		boolean for showing timeline option on contact picker above friends
* @property data.showAddGroup
* 		boolean for showing creategroup option above the groupList
* @property data.ShowSendButton
* 		boolean for showing bottom solid button on the bottom of the contact screen
* @property data.sendButtonText
*		string for showing text on bottom solid Button 
* @property data.headerText
* 		string for showing headertext on contact picker screen
* @property data.showSearch
* 		boolean for showing search icon on the header at right side
* @property data.showDialog
* 		boolean for showing dialog if data.showTimeline is true to select whether u want to post publically or within friends
* @property data.dialogboxHeading
* 		string for showing dialogbox heading
* @property data.dialogboxSubheading
* 		string for showing additional text on dialogbox
* @property data.negbtntext
*       string for showing text on dialogBox secondary color button
* @property data.posbtntext
*       string for showing text on dialogBox accent color button 
*/
class ContactsContainer extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			filteredContacts: [],
			filteredGroups: [],
			headertext: 'Select Groups',
			searchTerm: '',
			showTimeline: false,
			sendButtonEnable: false,
			showDialog: false,
			searchState: false
		}
		this.ContactList = [];
		this.groupsList = [];
		this.thumbnailData = [];
		this.createNewGroup = this.createNewGroup.bind(this);
		this.onSelectGroupRow = this.onSelectGroupRow.bind(this);
		this.onSelectUserRow = this.onSelectUserRow.bind(this);
		this.onSelectTimeline = this.onSelectTimeline.bind(this);
		this.sendEnable = this.sendEnable.bind(this);
		this.getList = this.getList.bind(this);
		this._onSendPress = this._onSendPress.bind(this);
		this.onNegativePress = this.onNegativePress.bind(this);
		this.onPositivePress = this.onPositivePress.bind(this);
		this.getImage = this.getImage.bind(this);
		this.renderFriend = this.renderFriend.bind(this);
		this.renderGroup = this.renderGroup.bind(this);
		this.show = true;
		this.groupCount = 0;
		this.userCount = 0;
	}

	getImage(uidArray) {
		return new Promise((resolve, reject) => {
			console.log("i m in getImage");
			var param = {
				ignoreUnknownContacts: true,
				required_fields: ["thumbnail", "uid", "isOnHike", "name"],
				msisdns: uidArray,
			};
			const contactpromise = HikeSharing.getContactsData(param)
				.then(contactsList => {
					var i = contactsList.length - 1;
					while (i >= 0) {
						this.thumbnailData.push(contactsList[i]);
						i--;
					}
					if (this.ContactList.length === this.thumbnailData.length) {
						console.log(" i m inside if");
						this.thumbnailData = this.thumbnailData.sort((a, b) => {
							if (a.name.toUpperCase() < b.name.toUpperCase()) return -1;
							if (a.name.toUpperCase() > b.name.toUpperCase()) return 1;
							return 0;
						});
						this.ContactList = this.thumbnailData;
						this.setState({
							filteredContacts: this.thumbnailData
						});
					}
					resolve(contactsList);

				})
		});
	}

	componentWillMount() {
		var promises = [];
		const groupPromise = HikeSharing.getGroupsData()
			.then((groupsList = []) => {
				for (var i = 0; i < groupsList.length; i++) {
					groupsList[i].selected = false;
				}
				this.groupsList = groupsList;
				this.setState({ filteredGroups: groupsList });
			})
			.catch(err => {
				if (err == "Error: No groups found") {
					this.groupsList = [];
					this.setState({ filteredGroups: [] });

				} else {
					ToastAndroid.show("Something went wrong " + err, ToastAndroid.LONG);
				}
			});
		var param = {
			ignoreUnknownContacts: true,
			required_fields: ["isOnHike", "name", "uid"],
		};
		var uidArray = [];
		var uidtwo = [];
		const contactsPromise = HikeSharing.getContactsData(param)
			.then(contactsList => {
				var newObj = [];
				var j = 0;
				for (var i = 0; i < contactsList.length; i++) {
					if (j == 10) {
						uidtwo.push(uidArray);
						uidArray = [];
						j = 0;
					}
					if (contactsList[i].isOnHike) {
						contactsList[i].selected = false;
						contactsList[i].thumbnail = '';
						uidArray.push(contactsList[i].uid)
						newObj.push(contactsList[i]);
						j++;
					}
				}
				uidtwo.push(uidArray);

				this.ContactList = newObj;
				this.setState({ filteredContacts: newObj });
			})
		Promise.all([contactsPromise]).then(() => {
			var results = uidtwo.map(this.getImage)
		})
	}
	getList() {
		var list = [];
		for (var i = 0; i < this.state.filteredContacts.length; i++) {
			if (this.state.filteredContacts[i].selected) {
				list.push(this.state.filteredContacts[i].uid);

			}
		}
		for (var i = 0; i < this.state.filteredGroups.length; i++) {
			if (this.state.filteredGroups[i].selected) {
				list.push(this.state.filteredGroups[i].group_id);

			}
		}
		return list;
	}
	onNegativePress() {
		var list = this.getList();
		this.props.onSendClick && this.props.onSendClick(list, this.state.showTimeline, false);
	}
	onPositivePress() {
		var list = this.getList();
		this.props.onSendClick && this.props.onSendClick(list, this.state.showTimeline, true);
	}

	_onSendPress() {
		if (this.state.showTimeline) {
			this.setState({
				showDialog: true
			})
		} else {
			var list = this.getList();
			this.props.onSendClick && this.props.onSendClick(list, this.state.showTimeline, false);
		}
	}
	sendEnable() {
		if (this.props.sendButtonEnableEligibility) {
			var shouldEnableSendBtn = this.props.sendButtonEnableEligibility(this.groupCount, this.userCount, this.state.showTimeline);
			this.setState({ sendButtonEnable: shouldEnableSendBtn });
		} else {
			if (this.state.showTimeline || this.groupCount > 0 || this.userCount > 1) {
				this.setState({ sendButtonEnable: true });
			} else {
				this.setState({ sendButtonEnable: false });
			}
		}
	}

	onSelectTimeline() {
		if (this.groupCount < 1 && this.userCount < 2) {
			this.setState({ sendButtonEnable: !this.state.showTimeline })
		}
		this.setState({ showTimeline: !this.state.showTimeline });
		this.forceUpdate();
	}


	onSelectGroupRow(group) {
		console.log(group);
		
		if(this.props.data.groupsData){
			this.groupCount=1;
			this.sendEnable();
			this.props.onSelectGroupRow && this.props.onSelectGroupRow(group, true);
			
		}else{
		var newObj = Array.from(this.state.filteredGroups);
		var userObj = Array.from(this.state.filteredContacts);
		if (this.props.data.selection == 'NO_SELECT') {
			
		}
		else if (this.props.data.selection == 'MULTI_SELECT') {
			for (var i = 0; i < newObj.length; i++) {
				if (newObj[i].group_id === group.group_id) {
					newObj[i].selected = !newObj[i].selected;
					if (newObj[i].selected) {
						this.groupCount += 1;
					} else {
						this.groupCount -= 1;
					}
					break;
				}
			}
			this.setState({ filteredGroups: newObj });
			this.sendEnable();
			this.props.onSelectGroupRow && this.props.onSelectGroupRow(group, newObj[i].selected);
		} else if (this.props.data.selection == 'SELECT_ONE_FROM_EACH') {
			for (var i = 0; i < newObj.length; i++) {
				if (newObj[i].group_id === group.group_id) {
					newObj[i].selected = true;
					this.groupCount = 1;
					this.userCount = 0;
					this.sendEnable();
					this.props.onSelectGroupRow && this.props.onSelectGroupRow(group, newObj[i].selected);					
				} else {
					newObj[i].selected = false;
				}
			}
			this.setState({ filteredGroups: newObj });
		} else {
			for (var i = 0; i < userObj.length; i++) {
				userObj[i].selected = false;
			}
			for (var i = 0; i < newObj.length; i++) {
				if (newObj[i].group_id === group.group_id) {
					newObj[i].selected = true;
					this.groupCount = 1;
					this.userCount = 0;
					this.sendEnable();
					this.props.onSelectGroupRow && this.props.onSelectGroupRow(group, newObj[i].selected);
				} else {
					newObj[i].selected = false;
				}
			}
			this.setState({ filteredGroups: newObj });
			this.setState({ filteredContacts: userObj });
		}

		}
		
		
	}

	onSelectUserRow(User) {
		console.log(User);
		const newObj = Array.from(this.state.filteredContacts);
		var groupObj = Array.from(this.state.filteredGroups);
		if (this.props.data.selection == 'NO_SELECT') {
			
		}
		else if (this.props.data.selection == 'MULTI_SELECT') {
			for (var i = 0; i < newObj.length; i++) {
				if (newObj[i].uid === User.uid) {
					newObj[i].selected = !newObj[i].selected;
					if (newObj[i].selected) {
						this.userCount = this.userCount + 1;
					}
					else {
						this.userCount = this.userCount - 1;
					}
					break;
				}
			}
			this.sendEnable();
		
			this.setState({ filteredContacts: newObj });
			this.props.onSelectUserRow && this.props.onSelectUserRow(User, newObj[i].selected);
		} else if (this.props.data.selection == 'SELECT_ONE_FROM_EACH') {
			for (var i = 0; i < newObj.length; i++) {
				if (newObj[i].uid === User.uid) {
					newObj[i].selected = true;
					this.userCount = 1;
					this.groupCount = 0;
					this.sendEnable();
					this.props.onSelectUserRow && this.props.onSelectUserRow(User, newObj[i].selected);
				}
				else {
					newObj[i].selected = false;
				}
			}
			this.setState({ filteredContacts: newObj });
		} else {
			for (var i = 0; i < groupObj.length; i++) {
				groupObj[i].selected = false;
			}
			for (var i = 0; i < newObj.length; i++) {
				if (newObj[i].uid === User.uid) {
					newObj[i].selected = true;
					this.userCount = 1;
					this.groupCount = 0;
					this.sendEnable();
					this.props.onSelectUserRow && this.props.onSelectUserRow(User, newObj[i].selected);
				}
				else {
					newObj[i].selected = false;
				}
			}
			this.setState({ filteredContacts: newObj });
			this.setState({ filteredGroups: groupObj });
		}
	}

	SearchFilterFunction(text) {
		if (text.length) {
			this.setState({ searchState: true });
			const newData = this.groupsList.filter(function (item) {
				const itemData = item.name.toUpperCase()
				const textData = text.toUpperCase()
				return itemData.indexOf(textData) > -1
			})
			let newContactData = [];

			if (text.match(/^-?\d+$/)) {
				newContactData = this.ContactList.filter(function (item) {
					if (item.phoneNumber) {

						const itemData = item.phoneNumber
						const textData = text.toString()
						return itemData.indexOf(textData) > -1
					}
				})
			} else {
				newContactData = this.ContactList.filter(function (item) {
					const itemData = item.name.toUpperCase()
					const textData = text.toUpperCase()
					return itemData.indexOf(textData) > -1
				})
			}
			this.setState({
				filteredGroups: newData,
				text: text,
				filteredContacts: newContactData
			});
		}
		else {
			this.setState({
				filteredGroups: this.groupsList,
				text: text,
				filteredContacts: this.ContactList,
				searchState: false
			});
		}
	}

	createNewGroup() {
		HikeSharing.openGroupCreator().then((response) => {
			newObj = Object.assign({}, {
				name: response.name,
				group_id: response.groupId,
				"members_count": response.members.length + ' people',
				'membersCount': response.membersCount,
				groupSearchText: response.name.toUpperCase(),
				thumbnail: response.thumbnail
			});

			var list = [
				newObj,
				...this.groupsList,
			];

			this.groupsList = list;
			this.setState({ filteredGroups: list });
		});
	}

	renderGroup() {
		return (
			<View tabLabel="GROUPS">
				{
					(this.state.filteredGroups && (this.state.filteredGroups.length) > 0) ?
						<List
							showHeader={this.props.data.showAddGroup}
							data={this.props.data.groupsData ? this.props.data.groupsData : this.state.filteredGroups}
							onPressRow={this.onSelectGroupRow}
							text={'Create a new group'}
							imag={require('../../images/new_group.png')}
							keytext={'group_id'}
							onPressHeader={this.createNewGroup.bind(this)} />
						:
						this.state.searchState ?
							<NoSearchResult /> : null
				}
			</View>
		);
	}

	renderFriend() {
		return (
			<View tabLabel="FRIENDS">
				{
					(this.state.filteredContacts && (this.state.filteredContacts.length) > 0) ?
						<List
							showHeader={this.props.data.showTimeline}
							headerSelected={this.state.showTimeline}
							data={this.state.filteredContacts}
							onPressRow={this.onSelectUserRow}
							text={'Post to timeline'}
							imag={require('../../images/ic_forward_screen_timeline.png')}
							keytext={'uid'}
							onPressHeader={this.onSelectTimeline.bind(this)}
							extraData={this.state.showTimeline} />
						:
						this.state.searchState ?
							<NoSearchResult /> : null
				}
			</View>
		);
	}

	render() {
		const { filteredGroups, filteredContacts } = this.state;

		return (
			<View style={{ flex: 1 }}>
				{
					(this.props.data.showDialog && this.state.showDialog) ?
						<DialogBox
							renderWithList={true}
							visible={this.state.showDialog ? true : false}
							heading={this.props.data.dialogboxHeading}
							subheading={this.props.data.dialogboxSubheading}
							negbtntext={this.props.data.negbtntext}
							posbtntext={this.props.data.posbtntext}
							onNegativePress={this.onNegativePress}
							onPositivePress={this.onPositivePress} />
						: null
				}
				<View style={{ height: 60, marginTop: Platform.OS === 'ios' ? 15 : 25, backgroundColor: 'transparent', position: 'absolute', top: 0, zIndex: 999, left: 0, right: 0 }}>
					<ContactHeader
						headerText={this.props.data.headerText}
						onPress={this.props.onBack}
						searchEnable={this.props.data.showSearch}
						SearchFilterFunction={this.SearchFilterFunction.bind(this)} />
				</View>
				<AppThemeWrapper>
					{(this.props.data.showGroups && this.props.data.showFriends) ?
						<ScrollableTabView
							tabBarUnderlineStyle={[{ height: 2 }]}
							tabBarActiveTextColor={AppTheme.getColorPalette().accentColor}
							tabBarUnderlineStyle={{ backgroundColor: AppTheme.getColorPalette().accentColor }}
							tabBarInactiveTextColor={AppTheme.getColorPalette().secondaryColor}
							prerenderingSiblingsNumber={1}>
							{this.renderGroup()}
							{this.renderFriend()}
						</ScrollableTabView>
						:
						(this.props.data.showGroups) ? this.renderGroup() : this.renderFriend()
					}
				</AppThemeWrapper>
				{
					this.props.data.showSendButton &&
					<SendButton
						sendButtonText={this.props.data.sendButtonText}
						sendButtonEnable={this.state.sendButtonEnable}
						onSendPress={this._onSendPress.bind(this)}
					/>
				}
			</View>
		);
	}
}

export default ContactsContainer;
