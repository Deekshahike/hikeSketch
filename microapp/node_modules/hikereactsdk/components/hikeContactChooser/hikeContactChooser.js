import React, { Component } from 'react';
import { View, Text, ListView, ActivityIndicator, StyleSheet, Image, TouchableNativeFeedback, ToastAndroid } from 'react-native';
import { HikeSharing } from '../../apis';
const PropTypes = React.PropTypes;

const categoryNameMap = {
  friends: 'Friends',
  onHike: 'On Hike',
  notOnHike: 'Not On Hike',
};

const placeholderIcon = require('./images/contact.png');

const noop = () => {};

export default class HikeContactChooser extends Component {
  static propTypes = {
    onSelectContact: PropTypes.func,
    showsVerticalScrollIndicator: PropTypes.bool,
  };

  static defaultProps = {
    onSelectContact: noop,
    showsVerticalScrollIndicator: false,
  };

  constructor(props) {
    super(props);

    this.ds = new ListView.DataSource({
      rowHasChanged: (r1, r2) => r1 !== r2,
      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,
    });

    this.state = {
      loaded: false,
    };

    this._renderRow = this._renderRow.bind(this);
    this._renderSectionHeader = this._renderSectionHeader.bind(this);
  }

  componentDidMount() {
    HikeSharing.getContactsData()
      .then((contactList = []) => {
        let contactData = {
          friends: [],
          onHike: [],
          notOnHike: [],
        };
        contactList.forEach(contact => {
          const isOnHike = contact.isOnHike;
          const isFriend = contact.isFriend;

          contactData[isFriend ? 'friends' : isOnHike ? 'onHike' : 'notOnHike'].push(contact);
        });

        this.setState({
          loaded: true,
          dataSource: this.ds.cloneWithRowsAndSections(contactData),
        });
      })
      .catch((err) => {
        ToastAndroid.show("Something went wrong " + err, ToastAndroid.LONG);
      })
  }

  _onSelectContact(contact) {
    this.props.onSelectContact(contact);
  }

  _renderRow(contact) {
    const profilePicture = contact.thumbnail ?
      { uri: `data:image/png;base64, ${decodeURIComponent(contact.thumbnail)}` } :
      placeholderIcon;

    return (
      <TouchableNativeFeedback onPress={this._onSelectContact.bind(this, contact)}>
        <View style={styles.contactItem}>
          <Image source={profilePicture} style={styles.contactIcon}/>
          <View style={styles.contactDesc}>
            <Text style={styles.contactName}>{contact.name}</Text>
            <Text style={styles.contactNumber}>{contact.phoneNumber}</Text>
          </View>
        </View>
      </TouchableNativeFeedback>
    );
  }

  _renderSectionHeader(sectionData, category) {
    if(sectionData.length>0)
      return (
        <View>
          <View style={styles.listSeparator}>
            <View style={styles.emptyLeftSection}></View>
            <View style={styles.borderRow}></View>
          </View>
          <View style={styles.sectionHeader}>
            <Text style={styles.contactCategory}>{categoryNameMap[category].toUpperCase()}</Text>
          </View>
       </View>
      );
    return null;
  }

  render() {
    return (
      !this.state.loaded ?
      <View style={[styles.loader, this.props.style]}>
        <ActivityIndicator/>
      </View> :

      <View style={[styles.ctr, this.props.style]}>
        <ListView style={{flex: 1}}
          dataSource={this.state.dataSource}
              renderRow={this._renderRow}
              renderSectionHeader={this._renderSectionHeader}
              enableEmptySections={true}
              showsVerticalScrollIndicator={this.props.showsVerticalScrollIndicator}
              renderSeparator={(sectionId, rowId) =>
                          <View style={styles.listSeparator} key={rowId+sectionId}>
                            <View style={styles.emptyLeftSection}></View>
                            <View style={styles.borderRow}></View>
                          </View>

              }
            />
      </View>
    );
  }
}

const iconSize = 48;

const styles = StyleSheet.create({
  loader: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  ctr: {
    flex: 1,
    justifyContent: 'flex-start',
  },
  sectionHeader:{
      justifyContent:'center',
      backgroundColor:'#ffffff'
  },
  listSeparator: {
    flex: 1,
    flexDirection: 'row',
    flexWrap: 'wrap',
  },

  emptyLeftSection: {
    width: 82,
    borderBottomWidth: 1,
    borderBottomColor: '#ffffff',
  },

  borderRow: {
    flex: 1,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.06)',
  },

  contactCategory: {
    fontWeight: '300',
    alignSelf:'center',
    marginVertical: 18,
    fontSize:12,
    color:'rgba(0,0,0,0.3)'
  },
  contactItem: {
    flex:1,
    flexDirection: 'row',
    alignItems: 'flex-start',
    paddingLeft:20,
    paddingTop:12,
    paddingBottom:12,
    backgroundColor:'#ffffff',
    alignItems: 'center',
  },
  contactIcon: {
    width: 48,
    height: 48,
    borderRadius: 48,
  },
  contactDesc:{
    flex:1,
    flexDirection:'column',
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 16
  },
  contactName: {
    flex:1,
    flexDirection:'row',
    alignSelf:'flex-start',
    fontSize: 16,
    color:'#3D475B',
    marginBottom:6
  },
  contactNumber:{
    flex:1,
    flexDirection:'row',
    alignSelf:'flex-start',
    fontSize: 14,
    color:'rgba(61,71,91,0.5)'
  }
});
